
---

- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]

    - name: Install latest version of Apache
      apt: name=apache2 update_cache=yes state=latest
    
    - name: Change file ownership, group and permissions
      ansible.builtin.file:
        path: "/var/www/html/{{ http_host }}"
        state: directory
        recurse: true
        owner: "{{ app_user }}"
        group: "www-data"
        mode: '775'


    - name: Copy index file
      template:
        src: "index.html"
        dest: "/var/www/html/{{ http_host }}/index.html"

    - name: Set up Apache virtualhost
      template:
          src: "j2files/apache.conf.j2"
          dest: "/etc/apache2/sites-available/{{ http_conf }}"
      notify: Reload Apache

    - name: Enable new site
      shell: /usr/sbin/a2ensite {{ http_conf }}
      notify: Reload Apache

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      when: disable_default
      notify: Reload Apache

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

- name: instal Mysql& git
  become: yes
  hosts: all
  vars_files:
    - vars/default.yml
  tasks:
    - name: Installing Mysql  and dependencies
      package:
       name: "{{item}}"
       state: present
       update_cache: yes
      loop:
       - mysql-server
       - mysql-client 
       - python3-mysqldb
       - libmysqlclient-dev
      become: yes

    - name: start and enable mysql service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: creating mysql user (kkins)
      mysql_user:
        name: "{{db_user}}"
        password: "{{db_pass}}"
        priv: '*.*:ALL'
        host: '%'
        state: present

    - name: creating kingsley_db
      mysql_db:
        name: "{{db_name}}"
        state: present

    - name: Enable remote login to mysql
      lineinfile:
         path: /etc/mysql/mysql.conf.d/mysqld.cnf
         regexp: '^bind-address'
         line: 'bind-address = 0.0.0.0'
         backup: yes
      notify:
         - Restart mysql
  handlers:

    - name: Restart mysql
      service:
        name: mysql
        state: restarted

- name: PHP & other denpendencies
  become: true
  hosts: all

  tasks:
    - name: Install git & others
      apt:
       pkg:
        - git
        - unzip
        - curl
        - ufw

    - name: Install Software properties
      command: apt install -y software-properties-common

    - name: Add Apt Repo for PHP
      command: add-apt-repository ppa:ondrej/php -y
  
    - name: Update "apt"
      apt:
        update_cache: true
        autoclean: true 
  
    - name: Install PHP
      command: apt install --no-install-recommends php8.1 -y

    - name: Update "apt"
      apt:
        update_cache: true
        autoclean: true

    - name: Install PHP 8.1 and it's libraries
      apt:
        pkg:
        - libapache2-mod-php8.1
        - php8.1-common
        - php8.1-mysql
        - php8.1-xml
        - php8.1-xmlrpc
        - php8.1-curl
        - php8.1-gd
        - php8.1-imagick
        - php8.1-cli
        - php8.1-dev
        - php8.1-imap
        - php8.1-mbstring
        - php8.1-opcache
        - php8.1-soap
        - php8.1-zip
        - php8.1-intl

    - name: Update "apt"
      apt:
        update_cache: true
        autoclean: true 

- hosts: all
  vars_files:
    - vars/default.yml
  tasks:
    - name: Change the project directory and install Composer
      ansible.builtin.shell: curl -sS https://getcomposer.org/installer | php
      args:
        chdir: /usr/src/
        creates: /usr/local/bin/composer
        warn: false
      become: yes
      

    - name: Make composer executable by user
      ansible.builtin.file:
        dest: /usr/local/bin/composer
        mode: '0775'
        src: /usr/src/composer.phar
        state: link
        owner: root
      become: yes

    - name:  Clone laravel & run composer
      git:
        repo: https://github.com/laravel/laravel.git
        dest: "/var/www/html/{{ http_host }}"
        clone: yes
        force: yes
        update: false
      remote_user: "{{ app_user }}"
      become: yes


    #- name: install composer
      #composer: 
        #command: install --no-interaction
       # working_dir: "/var/www/html/{{ http_host }}"
      #remote_user: "{{ app_user }}"

    - name: generate env file
      copy:
        dest: "/var/www/html/{{ http_host }}/.env"
        content: |
          APP_NAME="king's Laravel App"
          APP_ENV=local
          APP_KEY=
          APP_DEBUG=true
          APP_URL=http://kinglseysalvo.me
          APP_PORT=3000

          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug

          DB_CONNECTION=mysql
          DB_HOST=mysql
          DB_PORT=3306
          DB_DATABASE=kkins
          DB_USERNAME=kingsley
          DB_PASSWORD=12345

          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120

          MEMCACHED_HOST=127.0.0.1

          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379

          MAIL_MAILER=smtp
          MAIL_HOST=mailhog
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"

          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false

          PUSHER_APP_ID=
          PUSHER_APP_KEY=
          PUSHER_APP_SECRET=
          PUSHER_APP_CLUSTER=mt1

          MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
          MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

          L5_SWAGGER_GENERATE_ALWAYS=true
          SAIL_XDEBUG_MODE=develop,debug
          SAIL_SKIP_CHECKS=true

    - name: Run the php artisan key:generate command 
      ansible.builtin.shell:
        cmd: php artisan key:generate
        chdir: "/var/www/html/{{ http_host }}"
 
   # - name: set timezone to Ghana/Accra
     # timezone:
      #  name: Ghana/Accra

- hosts: all
  name: Installing postsql and setting up ssl certification
  become: yes
  tasks:
 
    - name: Script to install PostgreSQL
      ansible.builtin.script: psql.sh
   
    - name: Installing snapd
      apt:
        name: snapd
        state: present

    - name: Installing Core
      community.general.snap:
        name: core

    - name: Refreshing Core
      command: snap refresh core

    - name: Installing certbot
      community.general.snap:
        name: certbot
        classic: true

    - name: Configuring certbot
      shell: sudo ln -s /snap/bin/certbot /usr/bin/certbot
      args:
        chdir: /usr/bin/
        creates: certbot

    - name: Stop services to allow certbot to generate a cert.
      service:
       name: "apache2"
       state: stopped

    - name: Requesting SSL Certificate
      shell: "certbot certonly --standalone --noninteractive --agree-tos --email salvokingsley@gmail.com -d kingsleysalvo.me"
    - name: Start services after cert has been generated.
      service:
        name: "apache2"
        state: started
